// Code generated by MockGen. DO NOT EDIT.
// Source: ./datastore.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/hanzezhenalex/wechat/src/datastore"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataStore)(nil).Close))
}

// CreateRecordAndCheckHash mocks base method.
func (m *MockDataStore) CreateRecordAndCheckIfHashExist(ctx context.Context, record datastore.Record) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecordAndCheckIfHashExist", ctx, record)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecordAndCheckHash indicates an expected call of CreateRecordAndCheckHash.
func (mr *MockDataStoreMockRecorder) CreateRecordAndCheckHash(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecordAndCheckIfHashExist", reflect.TypeOf((*MockDataStore)(nil).CreateRecordAndCheckIfHashExist), ctx, record)
}

// CreateUser mocks base method.
func (m *MockDataStore) CreateUser(ctx context.Context, new datastore.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDataStoreMockRecorder) CreateUser(ctx, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDataStore)(nil).CreateUser), ctx, new)
}

// GetAllUsers mocks base method.
func (m *MockDataStore) GetAllUsers(ctx context.Context) ([]datastore.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]datastore.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockDataStoreMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDataStore)(nil).GetAllUsers), ctx)
}

// GetRecordsByLeader mocks base method.
func (m *MockDataStore) GetRecordsByLeader(ctx context.Context, id string, option datastore.RecordQueryOption) ([]datastore.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsByLeader", ctx, id, option)
	ret0, _ := ret[0].([]datastore.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsByLeader indicates an expected call of GetRecordsByLeader.
func (mr *MockDataStoreMockRecorder) GetRecordsByLeader(ctx, id, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsByLeader", reflect.TypeOf((*MockDataStore)(nil).GetRecordsByLeader), ctx, id, option)
}

// GetRecordsByUser mocks base method.
func (m *MockDataStore) GetRecordsByUser(ctx context.Context, id string, option datastore.RecordQueryOption) ([]datastore.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsByUser", ctx, id, option)
	ret0, _ := ret[0].([]datastore.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsByUser indicates an expected call of GetRecordsByUser.
func (mr *MockDataStoreMockRecorder) GetRecordsByUser(ctx, id, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsByUser", reflect.TypeOf((*MockDataStore)(nil).GetRecordsByUser), ctx, id, option)
}
