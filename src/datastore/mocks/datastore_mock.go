// Code generated by MockGen. DO NOT EDIT.
// Source: ./datastore.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/hanzezhenalex/wechat/src/datastore"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method.
func (m *MockDataStore) CreateNewUser(ctx context.Context, user datastore.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockDataStoreMockRecorder) CreateNewUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockDataStore)(nil).CreateNewUser), ctx, user)
}

// CreateRecord mocks base method.
func (m *MockDataStore) CreateRecord(ctx context.Context, record datastore.RecordInfo, md5 string, checkExist bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", ctx, record, md5, checkExist)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockDataStoreMockRecorder) CreateRecord(ctx, record, md5, checkExist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockDataStore)(nil).CreateRecord), ctx, record, md5, checkExist)
}

// GetAllHashes mocks base method.
func (m *MockDataStore) GetAllHashes(ctx context.Context, option datastore.HashQueryOption) ([]datastore.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHashes", ctx, option)
	ret0, _ := ret[0].([]datastore.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHashes indicates an expected call of GetAllHashes.
func (mr *MockDataStoreMockRecorder) GetAllHashes(ctx, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHashes", reflect.TypeOf((*MockDataStore)(nil).GetAllHashes), ctx, option)
}

// GetAllUsers mocks base method.
func (m *MockDataStore) GetAllUsers(ctx context.Context) ([]datastore.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]datastore.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockDataStoreMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDataStore)(nil).GetAllUsers), ctx)
}

// GetUserById mocks base method.
func (m *MockDataStore) GetUserById(ctx context.Context, id string) (datastore.UserInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(datastore.UserInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockDataStoreMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockDataStore)(nil).GetUserById), ctx, id)
}
